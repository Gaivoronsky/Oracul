services:
  # Database service
  postgres:
    image: postgres:14-alpine
    container_name: news_aggregator_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-news_aggregator}
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - news_aggregator_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: news_aggregator_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Dlog4j2.disable.jmx=true -Des.cgroups.hierarchy.override=/ -Djna.tmpdir=/tmp -Djava.io.tmpdir=/tmp"
      - xpack.security.enabled=false
      - transport.host=localhost
      - http.host=0.0.0.0
      - cluster.routing.allocation.disk.threshold_enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - news_aggregator_network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # API service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: news_aggregator_api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-news_aggregator}
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX:-news}
      - API_HOST=0.0.0.0
      - API_PORT=${API_PORT:-8000}
      - LOG_DIR=/app/logs
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    volumes:
      - ../logs:/app/logs
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - news_aggregator_network

  # Crawler service
  crawler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.crawler
    container_name: news_aggregator_crawler
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-news_aggregator}
      - SOURCES_CONFIG_FILE=/app/data/sources.json
      - LOG_DIR=/app/logs
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    networks:
      - news_aggregator_network

  # Processor service
  processor:
    build:
      context: ..
      dockerfile: docker/Dockerfile.processor
    container_name: news_aggregator_processor
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-news_aggregator}
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX:-news}
      - LOG_DIR=/app/logs
    volumes:
      - ../logs:/app/logs
      - ../models:/app/models
    networks:
      - news_aggregator_network

  # Web service
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile.web
    container_name: news_aggregator_web
    restart: unless-stopped
    depends_on:
      - api
    environment:
      - API_URL=http://api:8000
      - WEB_PORT=${WEB_PORT:-3000}
    ports:
      - "${WEB_PORT:-3000}:3000"
    networks:
      - news_aggregator_network

networks:
  news_aggregator_network:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data: